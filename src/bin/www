#!/usr/bin/env node

"use strict";

var server = require('../server');
var debug = require("debug")("express:server");
var http = require("http");

// create http server
var httpPort = normalizePort(process.env.Port || 8080);
var app = server.Server.bootstrap().app;
app.set("port", httpPort);
var httpServer = http.createServer(app);

httpServer.listen(httpPort);
httpServer.on("error", onError);
httpServer.on("listening", onListening);
// process.on('SIGINT', onClose);
// process.on('SIGTERM', onClose);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(val)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.sycall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? `Pipe ${port}` : `Port ${prot}`;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;

    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === "string" ? `Pipe ${addr}` : `Port ${addr.port}`;

  debug(`Listening ${bind}`);
  // console.log(addr);
  console.log(`running server: http://localhost:${httpPort}`);
  console.log(`shutdown server "Ctrl + c"`);

}

function onClose() {
  console.log('');
  console.log('Shut donw the server!');
  process.exit(1);
}
